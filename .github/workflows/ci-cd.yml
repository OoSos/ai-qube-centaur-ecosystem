name: CI/CD Pipeline - Centaur Ecosystem

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily health check at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality & Security
  quality-check:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy bandit safety pytest-cov
        
    - name: Code Formatting Check
      run: black --check --diff .
      
    - name: Linting
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
    - name: Type Checking
      run: mypy src/ --ignore-missing-imports
      
    - name: Security Scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        safety check --json --output safety-report.json
        
    - name: Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Unit Tests
  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
        
    - name: Run Tests
      run: |
        pytest --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Agent Integration Tests
  test-agents:
    name: Agent Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-check]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Test Agent Framework
      run: python test_agent_integration.py
      
    - name: Test Communication Protocols
      run: |
        if [ -f "test_communication_protocols.py" ]; then
          python test_communication_protocols.py
        fi

  # Docker Build & Test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker Image
      run: |
        docker build -t centaur-ecosystem:test .
        
    - name: Test Docker Container
      run: |
        docker run --rm centaur-ecosystem:test python -c "import src; print('Container health check passed')"
        
    - name: Docker Security Scan
      run: |
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD:/app aquasec/trivy image centaur-ecosystem:test

  # Performance Tests
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-python, test-agents]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
        
    - name: Run Performance Tests
      run: |
        if [ -f "tests/test_performance.py" ]; then
          pytest tests/test_performance.py --benchmark-json=benchmark.json
        fi
        
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-check, test-python, test-agents, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging Environment
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add staging deployment commands here
        echo "‚úÖ Staging deployment completed"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, test-python, test-agents, docker-build, performance-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Production Health Check
      run: |
        echo "üîç Running production health checks..."
        # Add production health check commands
        
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add production deployment commands here
        echo "‚úÖ Production deployment completed"
        
    - name: Post-Deploy Verification
      run: |
        echo "‚úÖ Running post-deployment verification..."
        # Add verification commands
        echo "‚úÖ All systems operational"

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality-check, test-python, test-agents, docker-build]
    if: always()
    steps:
    - name: Notify Success
      if: ${{ needs.quality-check.result == 'success' && needs.test-python.result == 'success' && needs.test-agents.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "‚úÖ CI/CD Pipeline completed successfully"
        echo "üéâ All quality gates passed"
        
    - name: Notify Failure
      if: ${{ needs.quality-check.result == 'failure' || needs.test-python.result == 'failure' || needs.test-agents.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "‚ùå CI/CD Pipeline failed"
        echo "üîç Check logs for details"
